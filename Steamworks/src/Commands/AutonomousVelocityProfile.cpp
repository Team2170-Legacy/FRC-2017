// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousVelocityProfile.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousVelocityProfile::AutonomousVelocityProfile(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousVelocityProfile::Initialize() {
	Robot::driveTrain->SetChassisMode(CANTalon::TalonControlMode::kSpeedMode);
}

// Called repeatedly when this Command is scheduled to run
void AutonomousVelocityProfile::Execute() {
	double ErrorValue = 0.0;

	if (ErrorSource != nullptr) {
		ErrorValue = *(double*)ErrorSource;
	}
	Robot::driveTrain->SetChassisVelocity(*it, ErrorValue);
	Robot::driveTrain->TelemetryUpdate();
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousVelocityProfile::IsFinished() {
    return it == velocity.end();
}

// Called once after isFinished returns true
void AutonomousVelocityProfile::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousVelocityProfile::Interrupted() {

}

AutonomousVelocityProfile::AutonomousVelocityProfile(
		std::vector<double>& vIPS, int* error) {
	velocity = vIPS;
	it = velocity.begin();
	ErrorSource = error;
}
