// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ElevatorHome.h"


ElevatorHome::ElevatorHome(): Command(),
kHomeRange(Preferences::GetInstance()->GetDouble("ElevHomeRange", 0.1)){
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::payload.get());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	ExecuteCount = 0;
}


// Called just before this Command runs the first time
void ElevatorHome::Initialize() {
	Robot::payload->SetElevatorMode(Payload::LoopMode::kOpenLoop);
	mLastPosition = 1000.0;
	ExecuteCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void ElevatorHome::Execute() {
	Robot::payload->SlewElevator(Payload::ElevatorDir::kSlewHome);
	printf("Elevator Home Execute %d\n", ExecuteCount++);
}

// Make this return true when this Command no longer needs to run execute()
bool ElevatorHome::IsFinished() {
	bool Home = false;
	double NewPos = Robot::payload->GetElevatorPosition();
	double DeltaPos = mLastPosition - NewPos;

	printf("DeltaPos %f\n", DeltaPos);
	mLastPosition = NewPos;
	if ((NewPos == mLastPosition) && (ExecuteCount > 100)) {
		Home = true;
	}
	mLastPosition = NewPos;
	return (Home);
}

// Called once after isFinished returns true
void ElevatorHome::End() {
	Robot::payload->SlewElevator(Payload::ElevatorDir::kSlewStop);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ElevatorHome::Interrupted() {

}
