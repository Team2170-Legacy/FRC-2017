// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "vision/GearTwoNEW.h"
#include "Robot.h"
#include "WPiLib.h"
#include <vector>
#include <unistd.h>
#include <chrono>
#include "Commands/AutonomousCommand.h"
#include "Commands/AutonomousTestGroup.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Payload> Robot::payload;
std::shared_ptr<Dumper> Robot::dumper;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

int Gear_x;			// Global Gear Target x-location (in 320x240 image coordinates)
int e_Gear_x;		// Global variable for error in Gear_x location

int BBoiler_x; 		// Global Blue Boiler x-location (in 320x240 image coordinates)
int e_BBoiler_x;	// Global variable for error in Gear_x location

void Robot::VisionThread() {
	int status = 1;
	int* status_ptr = &status;

	cs::UsbCamera camera = CameraServer::GetInstance()->StartAutomaticCapture(0);
	usleep(1000000);
	camera.SetResolution(320, 240);
	usleep(1000000);
	//double exposure =
	camera.SetExposureManual(9);
	usleep(1000000);

//	cs::CvSink cvSink = CameraServer::GetInstance()->GetVideo();
	cs::CvSink cvSink = CameraServer::GetInstance()->GetVideo("USB Camera 0");
	usleep(1000000);

	cs::CvSource outputStreamStd = CameraServer::GetInstance()->PutVideo("Cam0", 320, 240);
	usleep(1000000);


	cv::Mat source;
	cv::Mat output;

	grip::GearTwoNEW GearPipeline;

	cv::Rect r1, r2;

	std::vector<std::vector<cv::Point> >* contours_ptr;
	std::vector<std::vector<cv::Point> > contours;
	std::vector<cv::Point> contour1;
	std::vector<cv::Point> contour2;


	while(true) {

		cvSink.GrabFrame(source);

		GearPipeline.Process(source);

		contours_ptr = GearPipeline.GetFilterContoursOutput();
		contours = *contours_ptr;

//		cvtColor(source, output, cv::COLOR_BGR2RGB);
		output = source;

		if (!contours.empty())
//		if (false)
		{
			if (contours.size() >= 2)
			{
				contour1 = contours[0];
				contour2 = contours[1];
				r1 = cv::boundingRect(contour1);
				r2 = cv::boundingRect(contour2);
				cv::Point tl1 = r1.tl();	//Rect_::x and Rect_::y
				cv::Point br1 = r1.br();
				cv::Point tl2 = r2.tl();	//Rect_::x and Rect_::y
				cv::Point br2 = r2.br();

				cv::Scalar color = cv::Scalar(180,105,255); // BGR for hot pink color
				cv::rectangle(output, tl1, br1, color, 4, 8, 0);
				cv::rectangle(output, tl2, br2, color, 4, 8, 0);

				int midpt_r1 [2] = {(tl1.x + br1.x) / 2, (tl1.y + br1.y) / 2};
				int midpt_r2 [2] = {(tl2.x + br2.x) / 2, (tl2.y + br2.y) / 2};
				int gear [2] = {(midpt_r1 [0] + midpt_r2 [0]) / 2, (midpt_r1 [1] + midpt_r2 [1]) / 2};

				cv::Point gear_midpoint( gear[0], gear[1]);
				cv::line(output, gear_midpoint, gear_midpoint, color, 4);

				Gear_x = gear[0];			// Transfer Gear Target x-location to other threads & Robot command functions
				e_Gear_x = Gear_x - 160;	// Define error in Gear_x location

	//			std::cout << "Midpoint of Rectangle 1: (" << midpt_r1 [0] << "," << midpt_r1 [1] << ")" << std::endl;
	//			std::cout << "Midpoint of Rectangle 2: (" << midpt_r2 [0] << "," << midpt_r2 [1] << ")" << std::endl;
	//			std::cout << "Gear Location: (" << gear [0] << "," << gear [1] << ")" << std::endl;
			} // if (size(contours) >= 2)
			else
			{
				e_Gear_x = 0;
			}

		} // if (!contours.empty())
		else
		{
			cv::Scalar color = cv::Scalar(180,105,255); // BGR for hot pink color
			cv::Point P1( 100, 100);
			cv::Point P2( 200, 200);
			cv::line(output, P1, P2, color, 4);
			e_Gear_x = 22;
		}
		outputStreamStd.PutFrame(output);
	} // while(true)
}; //void Robot::VisionThread()

void Robot::VisionThreadBBoiler() {
	int status = 1;
	int* status_ptr = &status;

	cs::UsbCamera camera2 = CameraServer::GetInstance()->StartAutomaticCapture(1);
	camera2.SetResolution(320, 240);
	//camera2.SetExposureManual(50);
	//usleep(1000000);

	cs::CvSink cvSink = CameraServer::GetInstance()->GetVideo("USB Camera 1");
	cs::CvSource outputStreamStd2 = CameraServer::GetInstance()->PutVideo("Cam1", 320, 240);

	cv::Mat source;
	cv::Mat output;

	grip::BBoilerPipeline BBoilerPipeline;

	cv::Rect r1, r8;

	std::vector<std::vector<cv::Point> >* contours_ptr;
	std::vector<std::vector<cv::Point> > contours;
	std::vector<cv::Point> contour1;
	std::vector<cv::Point> contour8;


	while(true) {

		cvSink.GrabFrame(source);

		BBoilerPipeline.Process(source);

		contours_ptr = BBoilerPipeline.GetFilterContoursOutput();
		contours = *contours_ptr;

//		cvtColor(source, output, cv::COLOR_BGR2RGB);
		output = source;

		cv::Scalar color2 = cv::Scalar(0,0,255); // BGR for red

		cv::Point r1tl = cv::Point(100, 100);
		cv::Point r1br = cv::Point(200, 200);
		cv::rectangle(output, r1tl, r1br, color2, 4, 8, 0);

		if (!contours.empty())
		{
			contour1 = contours[0];
			contour8 = contours[7];
			r1 = cv::boundingRect(contour1);
			r8 = cv::boundingRect(contour8);
			cv::Point tl1 = r1.tl();	//Rect_::x and Rect_::y
			cv::Point br1 = r1.br();
			cv::Point tl8 = r8.tl();	//Rect_::x and Rect_::y
			cv::Point br8 = r8.br();

			//cv::Scalar color2 = cv::Scalar(0,0,255); // BGR for red
//			cv::rectangle(output, tl1, br1, color2, 4, 8, 0);
//			cv::rectangle(output, tl8, br8, color2, 4, 8, 0);
			//cv::rectangle(source, r2.tl(), r2.br(), color, 4, 8, 0);

			int midpt_r1 [2] = {(tl1.x + br1.x) / 2, (tl1.y + br1.y) / 2};
			int midpt_r8 [2] = {(tl8.x + br8.x) / 2, (tl8.y + br8.y) / 2};
			int BBoiler [2] = {(midpt_r1 [0] + midpt_r8 [0]) / 2, (midpt_r1 [1] + midpt_r8 [1]) / 2};

			cv::Point BBoiler_midpoint(BBoiler[0], BBoiler[1]);
			cv::line(output, BBoiler_midpoint, BBoiler_midpoint, color2, 4);

			BBoiler_x = BBoiler[0];			// Transfer Gear Target x-location to other threads & Robot command functions
			e_BBoiler_x = BBoiler_x - 160;	// Define error in Gear_x location

//			std::cout << "Midpoint of Rectangle 1: (" << midpt_r1 [0] << "," << midpt_r1 [1] << ")" << std::endl;
//			std::cout << "Midpoint of Rectangle 2: (" << midpt_r2 [0] << "," << midpt_r2 [1] << ")" << std::endl;
//			std::cout << "Gear Location: (" << gear [0] << "," << gear [1] << ")" << std::endl;

		} // if (!contours.empty())
		outputStreamStd2.PutFrame(output);
	} // while(true)
}; //void Robot::VisionThread()

void Robot::RobotInit() {
	RobotMap::init();

	std::thread visionThread(VisionThread);
	visionThread.detach();

//	std::thread visionThreadBBoiler(VisionThreadBBoiler);
//	visionThreadBBoiler.detach();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    payload.reset(new Payload());
    dumper.reset(new Dumper());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousTestGroup());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	//Adds a sendable chooser
	chooser.AddObject("Autonomous", new (AutonomousCommand));
	chooser.AddDefault("Auto Testing - Don't choose in match!!", new (AutonomousTestGroup));
	SmartDashboard::PutData("Autonomous Modes", &chooser);
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	payload->SetIntakeSpeed(Payload::IntakeSpeed::kIntakeStop);
	dumper->DumperSetSpeed(Dumper::DumperSpeed::kDumperOff);
	SmartDashboard::PutBoolean("Dumper Running", dumper->IsDumperMoving());
	SmartDashboard::PutBoolean("DoorOpen", payload->IsDoorOpen());
	SmartDashboard::PutBoolean("Intake Running", payload->IsIntakeRunning());
}

void Robot::DisabledPeriodic() {
	UpdateSmartDash();
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand.release();
	autonomousCommand.reset((Command *)chooser.GetSelected());

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {

	std::cout << "Gear x-Location = " << Gear_x << std::endl;
	std::cout << "Gear x-Location Error = " << e_Gear_x << std::endl;

//	std::chrono::high_resolution_clock::time_point<std::chrono::system_clock> now;
//	now = std::chrono::system_clock::now();
	std::cout << "Time: " << GetFPGATime() << std::endl;

	SmartDashboard::PutNumber("Error for Gear_x: ", e_Gear_x);

	UpdateSmartDash();
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

void Robot::UpdateSmartDash() {
	SmartDashboard::PutBoolean("Intake Running", payload->IsIntakeRunning());
	SmartDashboard::PutBoolean("Dumper Running", dumper->IsDumperMoving());
	SmartDashboard::PutBoolean("DoorOpen", payload->IsDoorOpen());
	SmartDashboard::PutBoolean("Drive Reverse", driveTrain->isReverseDrive());
	SmartDashboard::PutNumber("Elevator Position", payload->GetElevatorPosition());
}
