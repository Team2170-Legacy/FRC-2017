// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "vision/GearTargetPipeline.h"
#include "Robot.h"
#include <vector>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	CameraServer::GetInstance()->StartAutomaticCapture();
	GearCameraSink = CameraServer::GetInstance()->GetVideo();
	CameraServer::GetInstance()->PutVideo("Cam0", 640, 480);
	//table = NetworkTable::GetTable("ContourReport");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	cv::Mat GearInput;
	cv::Rect r1, r2;
	GearCameraSink.GrabFrame(GearInput);
	GearPipeline.Process(GearInput);

	std::vector<std::vector<cv::Point> >* contours_ptr;
	std::vector<std::vector<cv::Point> > contours;
	std::vector<cv::Point> contour1;
	std::vector<cv::Point> contour2;

	contours_ptr = GearPipeline.GetFindContoursOutput();
	contours = *contours_ptr;

	if (!contours.empty())
	{
		contour1 = contours[0];
		contour2 = contours[1];
		//r = cv::boundingRect(GearPipeline.GetFindContoursOutput()[0]);	DOESN'T WORK!!!
		r1 = cv::boundingRect(contour1);
		r2 = cv::boundingRect(contour2);
		cv::Point tl1 = r1.tl();	//Rect_::x and Rect_::y
		cv::Point br1 = r1.br();
		cv::Point tl2 = r2.tl();	//Rect_::x and Rect_::y
		cv::Point br2 = r2.br();

		double r1w = r1.width;
		double r2w = r2.width;

		std::cout << "Rectangle 1: tl = " << tl1.x << "\t" << tl1.y << std::endl;
		std::cout << "Rectangle 1: br = " << br1.x << "\t" << br1.y << std::endl;
		std::cout << "Rectangle 1: x = " << r1.x << "\t" << "y = "<< r1.y << std::endl;

		std::cout << "Rectangle 2: tl = " << tl2.x << "\t" << tl2.y << std::endl;
		std::cout << "Rectangle 2: br = " << br2.x << "\t" << br2.y << std::endl;
		std::cout << "Rectangle 2: x = " << r2.x << "\t" << "y = "<< r2.y << std::endl;

		std::cout << "Rectangle 1 Width: " << r1w << std::endl;
		std::cout << "Rectangle 2 Width: " << r2w << std::endl;
	}
	//Results = GearPipeline.getfilterContoursOutput();
	Scheduler::GetInstance()->Run();

}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

