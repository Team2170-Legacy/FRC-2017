// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef PAYLOAD_H
#define PAYLOAD_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "CANTalon.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Payload: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	const double kSlewSpeed;
	const double kSlewDeltaPosition;
	const double kIntakeSpeed;
	const double kDoorOpenPosition;
	const double kDoorClosePosition;


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<Servo> doorServo;
	std::shared_ptr<CANTalon> cANTalonElevator;
	std::shared_ptr<CANTalon> cANTalonIntake;
	std::shared_ptr<SpeedController> speedControllerClimber;
	std::shared_ptr<DigitalInput> limitSwitchHome;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	void InitPayload();

	const unsigned short int kElevatorCountsPerRev=360;

public:
	Payload();
	void InitDefaultCommand();

	enum IntakeSpeed {
		kIntakeStop,
		kIntakeIn,
		kIntakeOut
	};
	void SetIntakeSpeed(IntakeSpeed speed);

	enum DoorPosition {
		kDoorOpen,
		kDoorClosed
	};
	void SetBackDoorPosition(DoorPosition position);

	enum ClimberSpeed {
		kUpSlow,
		kUpFast,
		kUpStop
	};
	void SetClimberSpeed(ClimberSpeed speed);

	enum LoopMode {
		kOpenLoop,
		kClosedLoop
	};
	void SetElevatorMode(LoopMode mode);

	enum ElevatorPos {
		kPosition0,
		kPosition1,
		kPosition2,
		kPosition3
	};
	void SetElevatorPosition(ElevatorPos position);

	enum ElevatorDir {
		kSlewStop,
		kSlewUp,
		kSlewDown
	};
	void SlewElevator(ElevatorDir direction);
	bool HomeSwitchActive();

	const double kIntakeOnSpeed=1.0;
	const double kIntakeOffSpeed=0.0;
	const double kElevatorOpenLoopUpSpeed=0.5;
	const double kElevatorOpenLoopDownSpeed=-0.5;
	const double kElevatorClosedLoopUpSpeed=0.5;
	const double kElevatorClosedLoopDownSpeed=-0.5;
	const double kElevatorStopSpeed=0.0;
	const double kClimberSpeedSlow=0.5;
	const double kClimberSpeedFast=1.0;
	const double kClimberSpeedStop=0.0;
	const double kElevatorMaxPosition=1.0;

private:
	LoopMode mCurrentMode = LoopMode::kOpenLoop;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
