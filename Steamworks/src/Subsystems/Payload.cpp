// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Payload.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Payload::Payload() : Subsystem("Payload"),
kSlewSpeed(Preferences::GetInstance()->GetDouble("ElevSlewSpeed", .3)),
kSlewDeltaPosition(Preferences::GetInstance()->GetDouble("ElevSlewDeltaPos", 10.0)),
kIntakeSpeed(Preferences::GetInstance()->GetInt("IntakeSpeed", 0.3)){
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    doorServo = RobotMap::payloadDoorServo;
    cANTalonElevator = RobotMap::payloadCANTalonElevator;
    cANTalonIntake = RobotMap::payloadCANTalonIntake;
    speedControllerClimber = RobotMap::payloadSpeedControllerClimber;
    limitSwitchHome = RobotMap::payloadLimitSwitchHome;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Payload::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Payload::SetIntakeSpeed(IntakeSpeed speed) {
	switch (speed) {
	case kIntakeStop:
		cANTalonIntake->Set(0.0);
		break;
	case kIntakeOut:
		cANTalonIntake->Set(kIntakeSpeed);
		break;
	case kIntakeIn:
		cANTalonIntake->Set(-kIntakeSpeed);
		break;
	}

}

void Payload::SetBackDoorPosition(double position) {
	doorServo->Set(position);
}



void Payload::SetClimberSpeed(double speed) {
	speedControllerClimber->Set(speed);
}


void Payload::InitPayload() {
	cANTalonElevator->SetFeedbackDevice(CANTalon::QuadEncoder);
	cANTalonElevator->ConfigEncoderCodesPerRev(kElevatorCountsPerRev);
	cANTalonElevator->SetSensorDirection(true);
	SetElevatorMode(LoopMode::kOpenLoop);
	cANTalonElevator->SelectProfileSlot(0);
	cANTalonElevator->Set(0);

}

void Payload::SetElevatorMode(LoopMode mode) {
	switch (mode) {
	case kClosedLoop:
		cANTalonElevator->SetControlMode(CANTalon::ControlMode::kPosition);
		break;
	case kOpenLoop:
		cANTalonElevator->SetControlMode(CANTalon::ControlMode::kVoltage);
		break;
	}
	mCurrentMode = mode;
}

void Payload::SetElevatorPosition(ElevatorPos position) {
}

void Payload::SlewElevator(ElevatorDir direction) {
}

bool Payload::HomeSwitchActive() {
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

