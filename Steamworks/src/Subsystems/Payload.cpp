// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Payload.h"
#include "../RobotMap.h"
#include "../Commands/ElevatorTeleop.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Payload::Payload() : Subsystem("Payload"),
kSlewSpeed(Preferences::GetInstance()->GetDouble("ElevSlewSpeed", .3)),
kSlewDeltaPosition(Preferences::GetInstance()->GetDouble("ElevSlewDeltaPos", 10.0)),
kIntakeSpeed(Preferences::GetInstance()->GetDouble("IntakeSpeed", 1.0)),
 kDoorAOpenPosition(
				Preferences::GetInstance()->GetDouble("DoorAOpenPos", 1.0)), kDoorAClosePosition(
				Preferences::GetInstance()->GetDouble("DoorAClosePos", 0.35)), kDoorBOpenPosition(
				Preferences::GetInstance()->GetDouble("DoorBOpenPos", 0.0)), kDoorBClosePosition(
				Preferences::GetInstance()->GetDouble("DoorBClosePos", 0.5)),
kElevatorOpenLoopUpSpeed(Preferences::GetInstance()->GetDouble("ElevatorOpenLoopUp", 0.5)),
kElevatorOpenLoopDownSpeed(Preferences::GetInstance()->GetDouble("ElevatorOpenLoopDn", -0.5)),
kElevatorMaxPosition(Preferences::GetInstance()->GetDouble("ElevatorMaxPos", 3.3)),
kElevatorMinPosition(Preferences::GetInstance()->GetDouble("ElevatorMinPos", 0.1)),
kClimberSpeedSlow(Preferences::GetInstance()->GetDouble("ClimberSlowSpeed", -0.5)),
kClimberSpeedFast(Preferences::GetInstance()->GetDouble("ClimberFastSpeed", -0.75)),
kIntakeElevatorMaxPos(Preferences::GetInstance()->GetDouble("IntakeElevatorMaxPos", 0.2)),
kElevatorHomeSpeed(Preferences::GetInstance()->GetDouble("ElevHomeSpeed", 0.25)){
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    doorServoA = RobotMap::payloadDoorServoA;
    doorServoB = RobotMap::payloadDoorServoB;
    cANTalonElevator = RobotMap::payloadCANTalonElevator;
    cANTalonClimber = RobotMap::payloadCANTalonClimber;
    speedControllerIntake = RobotMap::payloadSpeedControllerIntake;
    limitSwitchHome = RobotMap::payloadLimitSwitchHome;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    ElevatorLog.reset(new CANTalonLogger(cANTalonElevator, "Elevator.csv"));
    InitPayload();
}

void Payload::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ElevatorTeleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Payload::SetIntakeSpeed(IntakeSpeed speed) {
	double CurrentPosition = GetElevatorPosition();
	switch (speed) {
	case kIntakeStop:
		speedControllerIntake->Set(0.0);
		IntakeRunning = false;
		break;
	case kIntakeOut:
		speedControllerIntake->Set(kIntakeSpeed);
		IntakeRunning = true;
		break;
	case kIntakeIn:
		if (CurrentPosition < kIntakeElevatorMaxPos) {
			speedControllerIntake->Set(-kIntakeSpeed);
			IntakeRunning = true;
		}
		else {
			speedControllerIntake->Set(0.0);
			IntakeRunning = false;
		}
		break;
	}

}

void Payload::SetBackDoorPosition(DoorPosition position) {
	switch (position) {
	case kDoorOpen:
		doorServoA->Set(kDoorAOpenPosition);
		doorServoB->Set(kDoorBOpenPosition);
		DoorOpen = true;
		break;
	case kDoorClosed:
		doorServoA->Set(kDoorAClosePosition);
		doorServoB->Set(kDoorBClosePosition);
		DoorOpen = false;
		break;
	}
}



void Payload::SetClimberSpeed(ClimberSpeed speed) {
	switch (speed) {
	case kUpFast:
		cANTalonClimber->Set(kClimberSpeedFast);
		break;
	case kUpSlow:
		cANTalonClimber->Set(kClimberSpeedSlow);
		break;
	case kUpStop:
		cANTalonClimber->Set(kClimberSpeedStop);
		break;
	}
}


void Payload::InitPayload() {
	cANTalonElevator->SetFeedbackDevice(CANTalon::QuadEncoder);
	cANTalonElevator->ConfigEncoderCodesPerRev(kElevatorCountsPerRev);
	cANTalonElevator->SetStatusFrameRateMs(CANTalon::StatusFrameRate::StatusFrameRateFeedback, 10);
	cANTalonElevator->SetSensorDirection(false);
	cANTalonElevator->SetPosition(0.0);
	SetElevatorMode(LoopMode::kOpenLoop);
	cANTalonElevator->SelectProfileSlot(0);
	cANTalonElevator->Set(0);

}

void Payload::SetElevatorMode(LoopMode mode) {
	switch (mode) {
	case kClosedLoop:
		cANTalonElevator->SetTalonControlMode(CANTalon::TalonControlMode::kPositionMode);
		break;
	case kOpenLoop:
		cANTalonElevator->SetTalonControlMode(CANTalon::TalonControlMode::kThrottleMode);
		break;
	}
	mCurrentMode = mode;
}

void Payload::SetElevatorPosition(ElevatorPos position) {
}

void Payload::SlewElevator(ElevatorDir direction) {
	double CurrentPosition=GetElevatorPosition();
	if (mCurrentMode == LoopMode::kOpenLoop) {
		switch (direction) {
		case kSlewDown:
			if (CurrentPosition > kElevatorMinPosition) {
				cANTalonElevator->Set(kElevatorOpenLoopDownSpeed);
			}
			else {
				cANTalonElevator->Set(kElevatorStopSpeed);
			}
			break;
		case kSlewUp:
			if (CurrentPosition < kElevatorMaxPosition) {
				cANTalonElevator->Set(kElevatorOpenLoopUpSpeed);
			}
			else {
				cANTalonElevator->Set(kElevatorStopSpeed);
			}
			if ((IntakeRunning) && (CurrentPosition > kIntakeElevatorMaxPos)) {
				SetIntakeSpeed(IntakeSpeed::kIntakeStop);
			}
			break;
		case kSlewStop:
			cANTalonElevator->Set(kElevatorStopSpeed);
			break;
		case kSlewHome:
			cANTalonElevator->Set(kElevatorHomeSpeed);
			break;
		case kSlewOffHome:
			cANTalonElevator->Set(-kElevatorHomeSpeed / 2.0);
			break;
		}
	} else if (mCurrentMode == LoopMode::kClosedLoop) {
		switch (direction) {
		case kSlewDown:
			cANTalonElevator->Set(fmax(CurrentPosition-kElevatorClosedLoopDownSpeed,0));
			break;
		case kSlewUp:
			cANTalonElevator->Set(fmin(CurrentPosition+kElevatorClosedLoopUpSpeed,kElevatorMaxPosition));
			break;
		case kSlewStop:
			cANTalonElevator->Set(kElevatorStopSpeed);
			break;
		case kSlewHome:
		case kSlewOffHome:
			break;

		}
	}
}

bool Payload::IsIntakeRunning() {
	return IntakeRunning;
}

bool Payload::HomeSwitchActive() {
	return limitSwitchHome->Get();
}

bool Payload::IsDoorOpen() {
	return DoorOpen;
}

void Payload::ZeroElevatorPosition() {
	cANTalonElevator->SetPosition(0.0);
}

double Payload::GetElevatorPosition() {
	if (Preferences::GetInstance()->GetBoolean("NoElevator", false)) {
		return 0.0;
	}
	else {
		return cANTalonElevator->GetPosition();
	}
}
// Put methods for controlling this
// here. Call these from Commands.

