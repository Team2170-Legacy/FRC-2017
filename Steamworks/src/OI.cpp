// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousAllianceCmd.h"
#include "Commands/AutonomousBlendedMove.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/AutonomousMotionProfile.h"
#include "Commands/AutonomousTestGroup.h"
#include "Commands/AutonomousVelocityProfile.h"
#include "Commands/BackDoorClose.h"
#include "Commands/BackDoorOpen.h"
#include "Commands/BackDoorToggle.h"
#include "Commands/ClimberUp.h"
#include "Commands/ClimberUpSlow.h"
#include "Commands/DriveTrainToggleDirection.h"
#include "Commands/DumperHighLoadWhileHeld.h"
#include "Commands/DumperOff.h"
#include "Commands/DumperOn.h"
#include "Commands/DumperOnWhileHeld.h"
#include "Commands/DumperToggle.h"
#include "Commands/ElevatorHome.h"
#include "Commands/ElevatorInitialize.h"
#include "Commands/ElevatorOffHome.h"
#include "Commands/ElevatorPosition.h"
#include "Commands/ElevatorTeleop.h"
#include "Commands/IntakeOff.h"
#include "Commands/IntakeOn.h"
#include "Commands/IntakeReverse.h"
#include "Commands/IntakeToggle.h"
#include "Commands/IntakeToggleReverse.h"
#include "Commands/TankDriveTeleop.h"
#include "Commands/TeleopDrive.h"
#include "Commands/TeleopDriveStraight.h"
#include "Commands/VelocityStep.h"
#include "Commands/ZeroElevatorEncoder.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    rightDriverJoystick.reset(new Joystick(2));
    
    supportJoystick.reset(new Joystick(1));
    
    supportJoystickBackButton.reset(new JoystickButton(supportJoystick.get(), 7));
    supportJoystickBackButton->WhenPressed(new BackDoorToggle());
    supportJoystickLeftBumper.reset(new JoystickButton(supportJoystick.get(), 5));
    supportJoystickLeftBumper->WhileHeld(new ClimberUpSlow());
    supportJoystickRightBumper.reset(new JoystickButton(supportJoystick.get(), 6));
    supportJoystickRightBumper->WhileHeld(new ClimberUp());
    supportJoystickButtonY.reset(new JoystickButton(supportJoystick.get(), 4));
    supportJoystickButtonY->WhenPressed(new IntakeToggleReverse());
    supportJoystickButtonX.reset(new JoystickButton(supportJoystick.get(), 3));
    supportJoystickButtonX->WhenPressed(new IntakeToggle());
    supportJoystickButtonB.reset(new JoystickButton(supportJoystick.get(), 2));
    supportJoystickButtonB->WhileHeld(new DumperHighLoadWhileHeld());
    supportJoystickButtonA.reset(new JoystickButton(supportJoystick.get(), 1));
    supportJoystickButtonA->WhileHeld(new DumperOnWhileHeld());
    leftDriverJoystick.reset(new Joystick(0));
    
    leftDriverTrigger.reset(new JoystickButton(leftDriverJoystick.get(), 1));
    leftDriverTrigger->WhileHeld(new TeleopDriveStraight());
    leftDriverButtonLeft.reset(new JoystickButton(leftDriverJoystick.get(), 2));
    leftDriverButtonLeft->WhenPressed(new DriveTrainToggleDirection());
    dirverJoystickButtonY.reset(new JoystickButton(leftDriverJoystick.get(), 4));
    dirverJoystickButtonY->WhileHeld(new ClimberUp());
    driverJoystickButtonX.reset(new JoystickButton(leftDriverJoystick.get(), 3));
    driverJoystickButtonX->WhenPressed(new BackDoorToggle());

    // SmartDashboard Buttons
    SmartDashboard::PutData("Dumper High Load While Held", new DumperHighLoadWhileHeld());
    SmartDashboard::PutData("Elevator Initialize", new ElevatorInitialize());
    SmartDashboard::PutData("Autonomous Test Group", new AutonomousTestGroup());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	SmartDashboard::PutData("Velocity Step", new VelocityStep(0.75));
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getLeftDriverJoystick() {
   return leftDriverJoystick;
}

std::shared_ptr<Joystick> OI::getSupportJoystick() {
   return supportJoystick;
}

std::shared_ptr<Joystick> OI::getRightDriverJoystick() {
   return rightDriverJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
